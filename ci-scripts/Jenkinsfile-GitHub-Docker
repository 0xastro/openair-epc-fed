#!/bin/groovy
/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this file
 * except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */

//-------------------------------------------------------------------------------
// Abstraction function to send social media messages:
// like on Slack or Mattermost
def sendSocialMediaMessage(pipeChannel, pipeColor, pipeMessage) {
  if (params.pipelineUsesSlack != null) {
    if (params.pipelineUsesSlack) {
      slackSend channel: pipeChannel, color: pipeColor, message: pipeMessage
    }
  }
}

// Location of the CN executor node
def cn_ci_host = params.Host_CN_CI_Server

// for lock
def cn_ci_resource = params.DockerContainers

// Location of the 2nd CN executor
def new_host_flag = false
def new_host = ""
def new_host_user = ""

// Location of the CN tester
def dsT_host_flag = false
def dsT_host = ""
def dsT_host_user = ""

// Flags
def scmEvent = false
def upstreamEvent = false

// Default tags
def hssTag = 'develop'
def mmeTag = 'develop'
def spgwcTag = 'develop'
def spgwuTag = 'develop'

//-------------------------------------------------------------------------------
// Pipeline start
pipeline {
  agent {
    label cn_ci_host
  }
  options {
    disableConcurrentBuilds()
    timestamps()
    ansiColor('xterm')
    lock(cn_ci_resource)
  }
  stages {
    stage ('Verify Parameters') {
      steps {
        script {
          echo '\u2705 \u001B[32mVerify Parameters\u001B[0m'

          JOB_TIMESTAMP = sh returnStdout: true, script: 'date --utc --rfc-3339=seconds | sed -e "s#+00:00##"'
          JOB_TIMESTAMP = JOB_TIMESTAMP.trim()

          if (params.Host_CN_CI_2nd_Server_Flag != null) {
            new_host_flag = params.Host_CN_CI_2nd_Server_Flag
            if (new_host_flag) {
              new_host = params.Host_CN_CI_2nd_Server
              new_host_user = params.Host_CN_CI_2nd_Server_Login
              echo "1st Node   is ${NODE_NAME}"
              echo "2nd Node   is ${new_host}"
            } else {
              echo "Node       is ${NODE_NAME}"
            }
          } else {
            echo "Node       is ${NODE_NAME}"
          }

          // Find out the cause of the trigger
          for (cause in currentBuild.getBuildCauses()) {
            if (cause.toString() ==~ /.*GitHubPushCause.*/) {
              scmEvent = true
            } else if (cause.toString() ==~ /.*GhprbCause.*/) {
              scmEvent = true
            } else if (cause.toString() ==~ /.*UpstreamCause.*/) {
              upstreamEvent = true
            }
          }

          if (scmEvent) {
            // We work on the default tags if it is a push
            // If it's a PR, we should recover tags/branch and maybe to rebuild images
            sh "git clean -x -d -f > /dev/null 2>&1"
            sh './scripts/syncComponents.sh --hss-branch ' + hssTag + ' --mme-branch ' + mmeTag + ' --spgwc-branch ' + spgwcTag + ' --spgwu-tiny-branch ' + spgwuTag
            if (new_host_flag) {
              // Prepare the workspace in remote server
              myShCmd("if [ ! -e .git ]; then git clone --quiet ${GIT_URL} .; else git fetch --quiet --prune; fi", new_host_flag, new_host_user, new_host)
              myShCmd('git clean -x -d -f > /dev/null 2>&1', new_host_flag, new_host_user, new_host)
              myShCmd("git checkout -f ${GIT_COMMIT}", new_host_flag, new_host_user, new_host)
              myShCmd('./scripts/syncComponents.sh --hss-branch ' + hssTag + ' --mme-branch ' + mmeTag + ' --spgwc-branch ' + spgwcTag + ' --spgwu-tiny-branch ' + spgwuTag, new_host_flag, new_host_user, new_host)
            }
          }
          if (upstreamEvent) {
            sh "git clean -x -d -f > /dev/null 2>&1"
            sh "git checkout -f master"
            sh './scripts/syncComponents.sh --hss-branch ' + hssTag + ' --mme-branch ' + mmeTag + ' --spgwc-branch ' + spgwcTag + ' --spgwu-tiny-branch ' + spgwuTag
            if (new_host_flag) {
              // Prepare the workspace in remote server
              myShCmd("if [ ! -e .git ]; then git clone --quiet ${GIT_URL} .; else git fetch --quiet --prune; fi", new_host_flag, new_host_user, new_host)
              myShCmd('git clean -x -d -f > /dev/null 2>&1', new_host_flag, new_host_user, new_host)
              myShCmd('git checkout -f master', new_host_flag, new_host_user, new_host)
              myShCmd('./scripts/syncComponents.sh --hss-branch ' + hssTag + ' --mme-branch ' + mmeTag + ' --spgwc-branch ' + spgwcTag + ' --spgwu-tiny-branch ' + spgwuTag, new_host_flag, new_host_user, new_host)
            }
          }
        }
      }
    }
    stage ('Deploy Whole EPC') {
      stages {
        stage ('Create Public Network') {
          steps {
            script {
              myShCmd('docker network create --attachable --subnet 192.168.61.192/26 --ip-range 192.168.61.192/26 ci-oai-public-net', new_host_flag, new_host_user, new_host)
            }
          }
        }
        stage ('Deploy Containers') {
          steps {
            script {
              myShCmd('docker run --name ci-cassandra -d -e CASSANDRA_CLUSTER_NAME="OAI HSS Cluster" -e CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch cassandra:2.1', new_host_flag, new_host_user, new_host)
              myShCmd('docker run --name ci-oai-hss -d oai-hss:' + hssTag + ' /bin/bash -c "sleep infinity"', new_host_flag, new_host_user, new_host)
              myShCmd('docker network connect ci-oai-public-net ci-oai-hss', new_host_flag, new_host_user, new_host)
              myShCmd('docker run --name ci-oai-mme --network ci-oai-public-net -d oai-mme:' + mmeTag + ' /bin/bash -c "sleep infinity"', new_host_flag, new_host_user, new_host)
              myShCmd('docker run --privileged --name ci-oai-spgwc --network ci-oai-public-net -d oai-spgwc:' + spgwcTag + ' /bin/bash -c "sleep infinity"', new_host_flag, new_host_user, new_host)
              myShCmd('docker run --privileged --name ci-oai-spgwu-tiny --network ci-oai-public-net -d oai-spgwu-tiny:' + spgwuTag + ' /bin/bash -c "sleep infinity"', new_host_flag, new_host_user, new_host)
            }
          }
        }
      }
    }
    stage ('Check with DS Tester') {
      steps {
        echo "TO BE DONE!"
        sh 'sleep 30'
      }
    }
    stage ('Undeploy EPC') {
      stages {
        stage ('Deploy Containers') {
          steps {
            script {
              myShCmd('docker rm -f ci-cassandra ci-oai-hss ci-oai-mme ci-oai-spgwc ci-oai-spgwu-tiny', new_host_flag, new_host_user, new_host)
            }
          }
        }
        stage ('Delete Public Network') {
          steps {
            script {
              myShCmd('docker network rm ci-oai-public-net', new_host_flag, new_host_user, new_host)
            }
          }
        }
      }
    }
  }
  post {
    always {
      script {
        try {
          myShCmd('docker rm -f ci-cassandra ci-oai-hss ci-oai-mme ci-oai-spgwc ci-oai-spgwu-tiny', new_host_flag, new_host_user, new_host)
        } catch (Exception e) {
          echo "No problem: we may not started all containers or already destroyed"
        }
        // Removing the network
        try {
          myShCmd('docker network rm ci-oai-public-net', new_host_flag, new_host_user, new_host)
        } catch (Exception e) {
          echo "No problem: we may not started all docker networks or already deleted"
        }
      }
    }
  }
}

// Functions

def copyTo2ndServer(filename, flag, user, host) {
  if (flag) {
    sh "scp ${filename} ${user}@${host}:/tmp/CI-CN-FED"
  }
}

def copyFrom2ndServer(filename, target, flag, user, host) {
  if (flag) {
    sh "scp ${user}@${host}:/tmp/CI-CN-FED/${filename} ${target}"
  }
}

def myShCmd(cmd, flag, user, host) {
  if (flag) {
    sh "ssh -t -t ${user}@${host} 'cd /tmp/CI-CN-FED && ${cmd}'"
  } else {
    sh "${cmd}"
  }
}

def myShRetCmd(cmd, flag, user, host) {
  if (flag) {
    ret = sh returnStdout: true, script: "ssh -t -t ${user}@${host} 'cd /tmp/CI-CN-FED && ${cmd}'"
  } else {
    ret = sh returnStdout: true, script: "${cmd}"
  }
  ret = ret.trim()
  return ret
}
